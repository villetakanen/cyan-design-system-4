/**
 * Now with CSS container queries!
 *
 * We expect the content-columns to be used inside a main element, but
 * it could be used as a wrapper for any vertically scrolling content block.
 */

.content-columns {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  margin: 0;
  padding: 0;
  gap: var(--cn-gap);
  justify-content: center;
  align-items: flex-start;
  width: calc(100dvw - var(--cn-grid) * 2);
}

.content-columns > * {
  width: 100cqw;
}

@container main-app-content (width > 760px) {
  .content-columns {
    flex-direction: row;
    width: 100%;
  }

  .content-columns > :not(.full-width):not(.column-l):not(.column-s) {
    width: calc(55 * var(--cn-grid));
    flex-grow: 0;
  }

  .content-columns > .column-s {
    width: calc(34 * var(--cn-grid));
    flex-grow: 0;
  }

  .content-columns > .column-l {
    width: calc(88 * var(--cn-grid));
    flex-grow: 0;
  }

  .content-columns > .full-width {
    width: 100%;
    flex-grow: 1;
  }
}
@container main-app-footer (width > 760px) {
  .content-columns {
    flex-direction: row;
  }

  .content-columns > :not(.full-width):not(.column-l):not(.column-s) {
    width: calc(55 * var(--cn-grid));
    flex-grow: 0;
  }

  .content-columns > .column-s {
    width: calc(34 * var(--cn-grid));
    flex-grow: 0;
  }

  .content-columns > .column-l {
    width: calc(88 * var(--cn-grid));
    flex-grow: 0;
  }

  .content-columns > .full-width {
    width: 100%;
    flex-grow: 1;
  }
}
